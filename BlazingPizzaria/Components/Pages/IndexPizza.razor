@page "/pizzaSpecial"
@inject IProdutoServices pizzaServices
@inject InjectServicesWeb injectServicesWeb

<PageTitle>Blazing Pizza</PageTitle>
<div class="main">
    <div class="pizza-left" style="height: 20px">
        <h1>Pizzas</h1>
    </div>
        <div class="pizza-filter" style="height: 57px">
            <RadzenTextBox @oninput=@(args => FilterPizza(args.Value.ToString())) class="w-100" aria-label="TextBox with placeholder" Style="width: 205px" />
            <RadzenProfileMenu Style="width: 38px">
                <Template>
               
                </Template>
                <ChildContent>
                <RadzenRadioButtonList @bind-Value="@SelectValue" TValue="int" Change="@SelectFilter" Orientation="Orientation.Vertical" class="mb-5">
                        <Items>
                            <RadzenRadioButtonListItem Text="Nome" Value="1" />
                            <RadzenRadioButtonListItem Text="PreÃ§o" Value="2" />
                        </Items>
                    </RadzenRadioButtonList>
                </ChildContent>
            </RadzenProfileMenu>
       </div>
    <ul class="pizza-cards">
        @if (produtosFiltro != null)
        {
            @foreach (var special in produtosFiltro)
            {
                <li id="card-@special.Id" class="pizza-card" style="background-image: url('@special.Imagem.Url')" @onclick="() => ExpandCollapseCard(special.Id)">
                    <div class="pizza-info">
                        <span class="title">@special.Nome</span>
                        @special.Descricao
                        <span class="price">@special.Preco</span>
                    </div>
                    @if (expandedCardId == special.Id)
                    {
                        <div class="pizza-details">
                            <p><strong>Marca:</strong> @special.Marca</p>
                            <p><strong>SKU:</strong> @special.SKU</p>
                            <button @onclick="() => ExpandCollapseCard(special.Id) ">Fechar</button>
                        </div>
                    }
                </li>
            }
        }
    </ul>
</div>

@code {

    private bool IsExpanded = true;
    private Guid expandedCardId;
    private int SelectValue = 1;
    private IEnumerable<ProdutoDto> produtos { get; set; }
    private IEnumerable<ProdutoDto> produtosFiltro { get; set; }


    protected override async Task OnInitializedAsync()
    {
        produtos = await pizzaServices.GetItens();
        produtosFiltro = produtos;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        produtosFiltro = produtos;
    }

    protected async Task FilterPizza(string nome)
    {
        await OnAfterRenderAsync(true);

        if (nome != null)
        {
            produtosFiltro = produtosFiltro.Where(s => s.Nome.Contains(nome, StringComparison.OrdinalIgnoreCase)).ToList();

            SelectValue = 1;
        }
    }

    protected async Task SelectFilter()
    {
        await OnAfterRenderAsync(true);

        if (SelectValue == 2)
        {
            produtosFiltro = produtosFiltro.OrderBy(o => o.Preco).ToList();
            StateHasChanged();
        }
    }

    protected async Task ExpandCollapseCard(Guid id)
    {
        if (expandedCardId == id)
        {
            expandedCardId = Guid.Empty;
        }
        else
        {
            expandedCardId = id;
            await injectServicesWeb._jSRuntime.InvokeVoidAsync("ToggleCardExpansion", id);
        }
  
    }
 }

