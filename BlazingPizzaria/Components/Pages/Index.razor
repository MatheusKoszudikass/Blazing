@page "/"
@inject IProdutoServices pizzaServices
@inject InjectServicesWeb injectServicesWeb
@inject NotificationService notificationService

<!DOCTYPE html>
    <html>
    <head>
        <title>Teste</title>
    </head>
    <body>
     <!-- Header -->
 @*    <header class="headerProfile">
           <div class="flex h-full w-full flex-col items-center justify-center">
            <img src="/img/LogoMenu.png" alt="Blazing Pizzaria" class="imgPizzas" />
           
           </div>
    </header> *@
    <div class="pizza-filter" style="height: 57px">
        <RadzenTextBox @oninput=@(args => FilterPizza(args.Value.ToString())) class="w-100" aria-label="TextBox with placeholder" Placeholder="Pesquise aqui..." Style="width: 205px" />
        <RadzenProfileMenu Style="width: 38px">
            <Template>

            </Template>
            <ChildContent>
                <RadzenRadioButtonList @bind-Value="@SelectValue" TValue="int" Change="@SelectFilter" Orientation="Orientation.Vertical" class="mb-5">
                    <Items>
                        <RadzenRadioButtonListItem Text="Nome" Value="1" />
                        <RadzenRadioButtonListItem Text="Preço" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
            </ChildContent>
        </RadzenProfileMenu>
    </div>
    <div class="infOpenClose" id="@DateTime.Now">
        <span>Seg é Dom - 18:00 as 22:00</span>
    </div>
    <!-- Fim Header-->
    <h2 class="tituloCardapio">
        Conheça nosso cardápio
    </h2>

    <div id="menu">
            <!--Produto Item-->
        <menu class="gridColumProduto">
            @if ((notificacao && produtosFiltro != null) || produtos !=null)
            {
                var listaProdutos = notificacao ? produtosFiltro : produtos;

                @foreach (var item in listaProdutos)
                {
                <div class="flex gap-2">
                    <img src="@item.Imagem.Url" alt="Pizzas" class="imgPizzas" />
                    <div>
                         <p class="font-bold">@item.Nome</p>
                         <p class="text-sm">Descrição: @item.Descricao</p>
                         <p class="txt-sm">Avaliação: @item.Avaliacao.NumeroDeAvaliacoes</p>
                       <div class="priceButtonProdutos">
                          <p class="text-lg font-bold">R$:@item.Preco</p>
                           <RadzenButton class="add-to-cart-btn justify-between rounded bg-green-600 px-5" Click="@(async (args) => await ProdutosCart(item.Id))" TextStyle ButtonStyle="ButtonStyle.Success" >
                                <i class='bx bx-cart-add'></i>
                           </RadzenButton>

                       </div>
                    </div>
                </div>
                }
            }
        </menu>
            <!--fim do produto-->
    </div>
    <!--Fim do menu-->

    </body>
    </html>
@code{

    //Variaveis
    private bool notificacao = false;
    private int expandedCardId;
    private int SelectValue = 1;
    private IEnumerable<ProdutoDto> produtos { get; set; }
    private IEnumerable<ProdutoDto> produtosFiltro { get; set; }
    private List<ProdutoDto> listaCompra { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        produtos = await pizzaServices.GetItens();
        produtosFiltro = produtos;
    }

    //Passa lista de produtos do banco de dados para uma lista local.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        produtosFiltro = produtos;
    }

    //Função de filtra lista de produtos.
    protected async Task FilterPizza(string nome)
    {
        await OnAfterRenderAsync(true);

        if (nome != null)
        {
            produtosFiltro = produtos.Where(s => s.Nome.Contains(nome, StringComparison.OrdinalIgnoreCase)).ToList();

            SelectValue = 1;
            notificacao = true;
        }
    }

    //Função de selecionar o tipo de filtro.
    protected async Task SelectFilter()
    {
        await OnAfterRenderAsync(true);

        if (SelectValue == 2)
        {
            produtosFiltro = produtosFiltro.OrderBy(o => o.Preco).ToList();
            StateHasChanged();
        }
    }

    //Adiciona o produto em uma lista de compra 
    protected async Task ProdutosCart(Guid id)
    {
        var produtoParaAdicionar = produtos.FirstOrDefault(p => p.Id == id) ?? produtosFiltro?.FirstOrDefault(p => p.Id == id);


        if (produtoParaAdicionar != null && !listaCompra.Any(p => p.Id == produtoParaAdicionar.Id))
        {
            listaCompra.Add(produtoParaAdicionar);
            await injectServicesWeb._jSRuntime.InvokeVoidAsync("updateCartModal", listaCompra.Count());
            notificacao = true;
        }
        else
        {
            notificacao = false;
        }

        await NotificacaoAddProduto(notificacao);
        await OnAfterRenderAsync(true);
    }

    //Notificações
    protected async Task  NotificacaoAddProduto(bool produtoAdicionado)
    {
            if (produtoAdicionado)
            {
                var message = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Produto Adicionado",
                        Detail = "O produto foi adicionado ao carrinho com sucesso!",
                        Duration = 4000 // Tempo em milissegundos
                    };

                notificationService.Notify(message);
            }
            else
            {
                var message = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Produto já foi adicionado",
                        Detail = "Para mudar a quantidade por favor abra o carrinho ",
                        Duration = 4000 // Tempo em milissegundos
                    };

                notificationService.Notify(message);
            }

        
    }
}